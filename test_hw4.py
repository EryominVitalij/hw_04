
def test_greeting():
    """
    Напишите программу, которая выводит на экран приветствие.
    """
    name = "Анна"
    age = 25
    # Сформируйте нужную строку
    output = f"Привет, {name}! Тебе {age} лет."
    print(output) # Вывод результата получившейся строки
    # Проверяем результат
    assert output == "Привет, Анна! Тебе 25 лет."


def test_rectangle():
    """
    Напишите программу, которая берет длину и ширину прямоугольника
    и считает его периметр и площадь.
    """
    a = 10
    b = 20

    # Сосчитайте периметр

    perimeter = 2 * (a + b)
    assert perimeter == 60

    print(perimeter) # Вывод периметра прямоугольника

    # Сосчитайте площадь

    area = a * b

    print(area) # Вывод площади прямоугольника

    assert area == 200


def test_circle():
    """
    Напишите программу, которая берет радиус круга и выводит на экран его длину и площадь.
    Используйте константу PI
    """

    import math

    r = 23
    # Сосчитайте площадь

    area = math.pi * (r ** 2)

    print(area) # Вывод площади круга

    assert area == 1661.9025137490005

    # Сосчитайте длину окружности
    length = 2 * math.pi * r

    print(length) # Вывод длины окружности

    assert length == 144.51326206513048


def test_random_list():
    """
    Создайте список из 10 случайных чисел от 1 до 100 (включая обе границы) и отсортируйте его по возрастанию.
    """
    # Создайте список

    from random import randint

    l = [randint(1,100) for i in range(10)]
    l.sort()

    print(l)  # Выводит список из 10 случайных чисел от 1 до 100 с сортировкой по возрастанию

    assert len(l) == 10
    assert all(l[i] <= l[i + 1] for i in range(len(l) - 1))


def test_unique_elements():
    """
    Удалите из списка все повторяющиеся элементы
    """
    l = [1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10, 10]
    # Удалите повторяющиеся элементы
    l = list(set(l))

    print(l) # Выводит значения списка без дубликатов

    assert isinstance(l, list)
    assert len(l) == 10
    assert l == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


def test_dicts():
    """
    Создайте словарь из двух списков.
    Используйте первый список как ключи, а второй - как значения.
    Подсказка: используйте встроенную функцию zip.
    """
    first = ["a", "b", "c", "d", "e"]
    second = [1, 2, 3, 4, 5]
    # Создайте словарь
    d = dict(zip(first, second))

    print(d) # Выводит созданный с помощью встроенной функции zip словарь.

    assert isinstance(d, dict)
    assert len(d) == 5
    assert list(d.keys()) == first
    assert list(d.values()) == second